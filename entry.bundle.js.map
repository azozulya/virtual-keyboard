{"version":3,"file":"entry.bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;ACA4B;AACM;;AAElC;AACA,oBAAoB,iDAAQ;AAC5B;AACA,CAAC;;;;;;;;;;;;;;;;;ACNsC;AACA;;AAEvC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,QAAQ,4CAAM;AACd,QAAQ,4CAAM;AACd;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,EAAE;;AAEjD;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,oBAAoB,IAAI,iBAAiB;AACtE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,yBAAyB,GAAG,0BAA0B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB,IAAI,sBAAsB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,YAAY;;AAExB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;UC9QxB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA;UACA","sources":["webpack://virtual-keyboard/./src/scss/index.scss?fd75","webpack://virtual-keyboard/./src/js/index.js","webpack://virtual-keyboard/./src/js/keyboard.js","webpack://virtual-keyboard/webpack/bootstrap","webpack://virtual-keyboard/webpack/runtime/define property getters","webpack://virtual-keyboard/webpack/runtime/hasOwnProperty shorthand","webpack://virtual-keyboard/webpack/runtime/make namespace object","webpack://virtual-keyboard/webpack/before-startup","webpack://virtual-keyboard/webpack/startup","webpack://virtual-keyboard/webpack/after-startup"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import '../scss/index.scss';\nimport Keyboard from './keyboard';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const kbord = new Keyboard();\n  kbord.create();\n});\n","import enKeys from '../assets/en.json';\nimport ruKeys from '../assets/ru.json';\n\nconst keyButton = ({\n  key, keyCode, code, type,\n}) => {\n  const div = document.createElement('button');\n  div.classList.add('keyboard__btn', code && code.toLowerCase());\n  div.innerText = key;\n  div.code = code;\n  div.type = 'button';\n  div.variation = type || '';\n  div.id = keyCode;\n  return div;\n};\n\nconst createContainer = (tag, ...style) => {\n  const div = document.createElement(tag);\n  div.classList.add(...style);\n  return div;\n};\n\nclass Keyboard {\n  textarea;\n\n  kboard;\n\n  langContainer;\n\n  languages = {\n    ru: ruKeys,\n    en: enKeys,\n  };\n\n  constructor() {\n    this.lang = localStorage.getItem('lang') || 'en';\n    this.btns = [];\n    // this.create();\n  }\n\n  create() {\n    const div = createContainer('div', 'container');\n    const textareaWrapper = createContainer('div', 'textarea__wrapper');\n    this.textarea = createContainer('textarea', 'textarea');\n    this.textarea.cols = 100;\n    this.textarea.rows = 30;\n    textareaWrapper.append(this.textarea);\n\n    this.langContainer = createContainer('button', 'keyboard__btn', 'lang');\n    this.drawLanguageBtn();\n\n    this.kboard = createContainer('div', 'keyboard');\n    this.kboard.insertAdjacentElement('afterbegin', this.langContainer);\n\n    const currentLanguageKeys = this.languages[this.lang];\n\n    if (currentLanguageKeys) {\n      currentLanguageKeys.map((keyCode) => {\n        const btn = keyButton(keyCode);\n\n        this.btns.push(btn);\n        return this.kboard.append(btn);\n      });\n    }\n\n    div.insertAdjacentElement('afterbegin', textareaWrapper);\n    div.insertAdjacentElement('beforeEnd', this.kboard);\n    div.insertAdjacentHTML(\n      'beforeEnd',\n      '<p class=\"message\">Клавиатура создана в операционной системе Windows.<br> Для переключения языка комбинация: левыe <span>ctrl</span> + <span>alt</span></p>',\n    );\n\n    this.textarea.focus();\n    this.langContainer.addEventListener('click', this.changeLanguage);\n    this.kboard.addEventListener('click', this.onClickBtn);\n    this.kboard.addEventListener('mouseup', this.onMouseUp);\n    document.addEventListener('keydown', this.onKeyDown);\n    document.addEventListener('keyup', this.onKeyUp);\n    document.body.insertAdjacentElement('afterbegin', div);\n  }\n\n  drawLanguageBtn = () => {\n    this.langContainer.innerText = this.lang;\n    const styles = this.langContainer.classList;\n    const match = styles.value.match(/lang--\\w{2}/);\n\n    if (match) {\n      styles.remove(match[0]);\n    }\n    styles.add(`lang--${this.lang}`);\n  };\n\n  changeLanguage = () => {\n    this.lang = this.lang === 'ru' ? 'en' : 'ru';\n    localStorage.setItem('lang', this.lang);\n\n    this.drawLanguageBtn();\n\n    const keyCodes = this.languages[this.lang];\n\n    if (!keyCodes) return;\n\n    const letters = this.btns.filter((btn) => btn.variation === 'letter');\n\n    if (letters) {\n      letters.map((item) => {\n        const letterBtn = item;\n        const currentKey = keyCodes.find((key) => key.keyCode === parseInt(item.id, 10));\n        letterBtn.innerText = currentKey.key;\n        return letterBtn;\n      });\n    }\n  };\n\n  setUppercase = () => {\n    const letters = this.btns.filter((item) => item.variation === 'letter');\n\n    if (letters) {\n      letters.map((item) => item.classList.toggle('keyboard__btn--uppercase'));\n    }\n  };\n\n  addLetter = (letter) => {\n    const caretStart = this.textarea.selectionStart;\n    const val = this.textarea.value;\n    this.textarea.value = val.slice(0, caretStart) + letter + val.slice(caretStart);\n    this.textarea.selectionStart = caretStart + 1;\n    this.textarea.selectionEnd = caretStart + 1;\n  };\n\n  tabClick = () => {\n    const caret = this.textarea.selectionStart;\n    const val = this.textarea.value;\n    this.textarea.value = `${val.slice(0, caret)}\\t${val.slice(caret)}`;\n    this.textarea.selectionStart = caret + 1;\n    this.textarea.selectionEnd = caret + 1;\n  };\n\n  toggleActiveClass = (code, active) => {\n    const currentBtn = this.btns.find((item) => item.code === code);\n\n    if (!currentBtn) {\n      return false;\n    }\n\n    if (active === 'toggle') {\n      return currentBtn.classList.toggle('keyboard__btn--active');\n    }\n\n    if (active) {\n      return currentBtn.classList.add('keyboard__btn--active');\n    }\n    return currentBtn.classList.remove('keyboard__btn--active');\n  };\n\n  onClickBtn = (event) => {\n    const currentBtn = event.target;\n\n    this.textarea.focus();\n\n    if (!currentBtn) {\n      return false;\n    }\n    const caretStart = this.textarea.selectionStart;\n    const caretEnd = this.textarea.selectionEnd;\n    const val = this.textarea.value;\n\n    switch (currentBtn.code) {\n      case 'Space': {\n        this.textarea.value = `${val.slice(0, caretStart)} ${val.slice(caretStart + 1)}`;\n        this.textarea.selectionStart = caretStart + 1;\n        this.textarea.selectionEnd = caretStart + 1;\n        break;\n      }\n      case 'CapsLock': {\n        this.toggleActiveClass(currentBtn.code, 'toggle');\n        this.setUppercase();\n        break;\n      }\n      case 'NumpadDecimal': {\n        this.textarea.value = val.slice(0, caretStart) + val.slice(caretEnd + 1);\n        this.textarea.selectionStart = caretStart;\n        this.textarea.selectionEnd = caretStart;\n        break;\n      }\n      case 'Backspace': {\n        this.textarea.value = val.slice(0, caretStart - 1) + val.slice(caretStart);\n        this.textarea.selectionStart = caretStart - 1;\n        this.textarea.selectionEnd = caretStart - 1;\n        break;\n      }\n      case 'Enter': {\n        this.textarea.value = `${val.slice(0, caretStart)}\\n${val.slice(caretStart)}`;\n        this.textarea.selectionStart = caretStart + 1;\n        this.textarea.selectionEnd = caretStart + 1;\n        break;\n      }\n      case 'Tab': {\n        event.preventDefault();\n        this.tabClick();\n        break;\n      }\n      default:\n        break;\n    }\n\n    if (['letter', 'digit', 'symbol'].includes(currentBtn.variation)) {\n      this.addLetter(currentBtn.innerText);\n    }\n    return true;\n  };\n\n  onKeyDown = (event) => {\n    const {\n      code, altKey, ctrlKey, key, repeat,\n    } = event;\n\n    if (repeat) {\n      event.preventDefault();\n      return false;\n    }\n\n    this.textarea.focus();\n\n    if (code === 'CapsLock') {\n      this.toggleActiveClass(code, 'toggle');\n      return this.setUppercase();\n    }\n\n    if (code === 'Tab') {\n      event.preventDefault();\n      this.tabClick();\n      return this.toggleActiveClass(code, true);\n    }\n\n    if (altKey && ctrlKey) {\n      this.changeLanguage();\n      return this.toggleActiveClass(code, true);\n    }\n\n    if (key === 'Shift') {\n      this.setUppercase();\n      return this.toggleActiveClass(code, true);\n    }\n\n    const currentBtn = this.btns.find((btn) => btn.code === code);\n\n    if (currentBtn && ['letter', 'digit', 'symbol'].includes(currentBtn.variation)) {\n      event.preventDefault();\n      this.addLetter(currentBtn.innerText);\n      return this.toggleActiveClass(code, true);\n    }\n    return this.toggleActiveClass(code, true);\n  };\n\n  onKeyUp = (event) => {\n    const { code, key } = event;\n\n    if (key === 'Shift') {\n      this.toggleActiveClass(code, false);\n      return this.setUppercase();\n    }\n\n    if (code && code !== 'CapsLock') {\n      return this.toggleActiveClass(code, false);\n    }\n    return false;\n  };\n}\n\nexport default Keyboard;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n__webpack_require__(\"./src/js/index.js\");\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/scss/index.scss\");\n",""],"names":[],"sourceRoot":""}